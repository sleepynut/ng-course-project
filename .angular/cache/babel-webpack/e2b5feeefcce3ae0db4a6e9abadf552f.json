{"ast":null,"code":"import { catchError, tap } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { User } from './user.model';\nimport { environment } from 'src/environments/environment';\nimport { Login, Logout } from './store/auth.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ngrx/store\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, store) {\n      this.http = http;\n      this.router = router;\n      this.store = store;\n    }\n\n    signup(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.firebaseAPIKey, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(authRespData => {\n        this.handleAuth(authRespData.email, authRespData.localId, authRespData.idToken, +authRespData.expiresIn);\n      }));\n    }\n\n    login(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.firebaseAPIKey, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(authRespData => {\n        this.handleAuth(authRespData.email, authRespData.localId, authRespData.idToken, +authRespData.expiresIn);\n      }));\n    }\n\n    autoLogin() {\n      let userData = JSON.parse(localStorage.getItem('userData'));\n      if (!userData) return;\n      let loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpDate)); // this.user.next(loadedUser);\n\n      this.store.dispatch(new Login(loadedUser));\n\n      if (loadedUser.token) {\n        this.autoLogout(loadedUser.tokenExpDate.getTime() - new Date().getTime());\n        console.log('SUCCESS');\n      } else {\n        console.log('FAIL');\n      }\n    }\n\n    logout() {\n      // this.user.next(null);\n      this.store.dispatch(new Logout());\n      localStorage.removeItem('userData');\n      clearTimeout(this.timeoutCB);\n      this.router.navigate(['/auth']);\n    }\n\n    autoLogout(expiresIn) {\n      console.log('expires in: ' + expiresIn);\n      this.timeoutCB = setTimeout(() => {\n        this.logout();\n      }, expiresIn);\n    }\n\n    handleError(err) {\n      let errorMessage = 'There exists an unknown error.';\n      if (!err.error || !err.error.error) return throwError(errorMessage);\n\n      switch (err.error.error.message) {\n        case 'EMAIL_NOT_FOUND':\n        case 'INVALID_PASSWORD':\n          errorMessage = 'Email/Password is incorrect.';\n          break;\n\n        case 'USER_DISABLED':\n          errorMessage = 'This account has been disabled by the administrator.';\n          break;\n\n        case 'EMAIL_EXISTS':\n          errorMessage = 'This email is already taken.';\n      }\n\n      return throwError(errorMessage);\n    }\n\n    handleAuth(email, id, token, expiresIn) {\n      const expireDate = new Date(new Date().getTime() + expiresIn * 1000);\n      console.log('expireDate: ' + expireDate);\n      console.log('expiresIn: ' + expiresIn);\n      console.log('getTime: ' + new Date().getTime());\n      let u = new User(email, id, token, expireDate);\n      console.log('user!!');\n      console.log(u); // this.user.next(u);\n\n      this.store.dispatch(new Login(u));\n      localStorage.setItem('userData', JSON.stringify(u));\n      this.autoLogout(expiresIn * 1000);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Store));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}