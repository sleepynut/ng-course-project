{"ast":null,"code":"import * as i1 from '@ngrx/store';\nimport { createAction, props, isNgrxMockEnvironment, select, ACTIVE_RUNTIME_CHECKS, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, NgModule, Inject } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n/**\n * An action dispatched when a router navigation request is fired.\n */\n\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\n\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\n\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\n\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\n\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  const routerAction = action;\n\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id\n      };\n\n    default:\n      return state;\n  }\n}\n\nclass RouterStateSerializer {}\n\nclass DefaultRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      paramMap: route.paramMap,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig ? {\n        component: route.routeConfig.component,\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet\n      } : null,\n      queryParams: route.queryParams,\n      queryParamMap: route.queryParamMap,\n      fragment: route.fragment,\n      component: route.routeConfig ? route.routeConfig.component : undefined,\n      root: undefined,\n      parent: undefined,\n      firstChild: children[0],\n      pathFromRoot: undefined,\n      children\n    };\n  }\n\n}\n\nclass MinimalRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      routeConfig: route.routeConfig ? {\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet\n      } : null,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      firstChild: children[0],\n      children\n    };\n  }\n\n}\n\nvar NavigationActionTiming;\n\n(function (NavigationActionTiming) {\n  NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n  NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\n\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\n\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\n\nfunction _createRouterConfig(config) {\n  return {\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation,\n    ...config\n  };\n}\n\nvar RouterTrigger;\n\n(function (RouterTrigger) {\n  RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n  RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n  RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\n\nclass StoreRouterConnectingModule {\n  constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n    this.store = store;\n    this.router = router;\n    this.serializer = serializer;\n    this.errorHandler = errorHandler;\n    this.config = config;\n    this.activeRuntimeChecks = activeRuntimeChecks;\n    this.lastEvent = null;\n    this.routerState = null;\n    this.trigger = RouterTrigger.NONE;\n    this.stateKey = this.config.stateKey;\n\n    if (!isNgrxMockEnvironment() && isDevMode() && (activeRuntimeChecks?.strictActionSerializability || activeRuntimeChecks?.strictStateSerializability) && this.serializer instanceof DefaultRouterStateSerializer) {\n      console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' + 'with the DefaultRouterStateSerializer. The default serializer ' + 'has an unserializable router state and actions that are not serializable. ' + 'To use the serializability runtime checks either use ' + 'the MinimalRouterStateSerializer or implement a custom router state serializer. ' + 'This also applies to Ivy with immutability runtime checks.');\n    }\n\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n\n  static forRoot(config = {}) {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [{\n        provide: _ROUTER_CONFIG,\n        useValue: config\n      }, {\n        provide: ROUTER_CONFIG,\n        useFactory: _createRouterConfig,\n        deps: [_ROUTER_CONFIG]\n      }, {\n        provide: RouterStateSerializer,\n        useClass: config.serializer ? config.serializer : config.routerState === 0\n        /* Full */\n        ? DefaultRouterStateSerializer : MinimalRouterStateSerializer\n      }]\n    };\n  }\n\n  setUpStoreStateListener() {\n    this.store.pipe(select(this.stateKey), withLatestFrom(this.store)).subscribe(([routerStoreState, storeState]) => {\n      this.navigateIfNeeded(routerStoreState, storeState);\n    });\n  }\n\n  navigateIfNeeded(routerStoreState, storeState) {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n\n    const url = routerStoreState.state.url;\n\n    if (!isSameUrl(this.router.url, url)) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch(error => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n\n  setUpRouterEventsListener() {\n    const dispatchNavLate = this.config.navigationActionTiming === NavigationActionTiming.PostActivation;\n    let routesRecognized;\n    this.router.events.pipe(withLatestFrom(this.store)).subscribe(([event, storeState]) => {\n      this.lastEvent = event;\n\n      if (event instanceof NavigationStart) {\n        this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n\n        if (this.trigger !== RouterTrigger.STORE) {\n          this.storeState = storeState;\n          this.dispatchRouterRequest(event);\n        }\n      } else if (event instanceof RoutesRecognized) {\n        routesRecognized = event;\n\n        if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n          this.dispatchRouterNavigation(event);\n        }\n      } else if (event instanceof NavigationCancel) {\n        this.dispatchRouterCancel(event);\n        this.reset();\n      } else if (event instanceof NavigationError) {\n        this.dispatchRouterError(event);\n        this.reset();\n      } else if (event instanceof NavigationEnd) {\n        if (this.trigger !== RouterTrigger.STORE) {\n          if (dispatchNavLate) {\n            this.dispatchRouterNavigation(routesRecognized);\n          }\n\n          this.dispatchRouterNavigated(event);\n        }\n\n        this.reset();\n      }\n    });\n  }\n\n  dispatchRouterRequest(event) {\n    this.dispatchRouterAction(ROUTER_REQUEST, {\n      event\n    });\n  }\n\n  dispatchRouterNavigation(lastRoutesRecognized) {\n    const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState)\n    });\n  }\n\n  dispatchRouterCancel(event) {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event\n    });\n  }\n\n  dispatchRouterError(event) {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`)\n    });\n  }\n\n  dispatchRouterNavigated(event) {\n    const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n    this.dispatchRouterAction(ROUTER_NAVIGATED, {\n      event,\n      routerState\n    });\n  }\n\n  dispatchRouterAction(type, payload) {\n    this.trigger = RouterTrigger.ROUTER;\n\n    try {\n      this.store.dispatch({\n        type,\n        payload: {\n          routerState: this.routerState,\n          ...payload,\n          event: this.config.routerState === 0\n          /* Full */\n          ? payload.event : {\n            id: payload.event.id,\n            url: payload.event.url,\n            // safe, as it will just be `undefined` for non-NavigationEnd router events\n            urlAfterRedirects: payload.event.urlAfterRedirects\n          }\n        }\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n\n  reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nStoreRouterConnectingModule.ɵfac = function StoreRouterConnectingModule_Factory(t) {\n  return new (t || StoreRouterConnectingModule)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(RouterStateSerializer), i0.ɵɵinject(i0.ErrorHandler), i0.ɵɵinject(ROUTER_CONFIG), i0.ɵɵinject(ACTIVE_RUNTIME_CHECKS));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nStoreRouterConnectingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: StoreRouterConnectingModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nStoreRouterConnectingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: i1.Store\n    }, {\n      type: i2.Router\n    }, {\n      type: RouterStateSerializer\n    }, {\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ROUTER_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ACTIVE_RUNTIME_CHECKS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\n\n\nfunction isSameUrl(first, second) {\n  return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\n\nfunction stripTrailingSlash(text) {\n  if (text?.length > 0 && text[text.length - 1] === '/') {\n    return text.substring(0, text.length - 1);\n  }\n\n  return text;\n}\n\nfunction createRouterSelector() {\n  return createFeatureSelector(DEFAULT_ROUTER_FEATURENAME);\n}\n\nfunction getSelectors(selectState = createRouterSelector()) {\n  const selectRouterState = createSelector(selectState, router => router && router.state);\n  const selectRootRoute = createSelector(selectRouterState, routerState => routerState && routerState.root);\n  const selectCurrentRoute = createSelector(selectRootRoute, rootRoute => {\n    if (!rootRoute) {\n      return undefined;\n    }\n\n    let route = rootRoute;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    return route;\n  });\n  const selectFragment = createSelector(selectRootRoute, route => route && route.fragment);\n  const selectQueryParams = createSelector(selectRootRoute, route => route && route.queryParams);\n\n  const selectQueryParam = param => createSelector(selectQueryParams, params => params && params[param]);\n\n  const selectRouteParams = createSelector(selectCurrentRoute, route => route && route.params);\n\n  const selectRouteParam = param => createSelector(selectRouteParams, params => params && params[param]);\n\n  const selectRouteData = createSelector(selectCurrentRoute, route => route && route.data);\n  const selectUrl = createSelector(selectRouterState, routerState => routerState && routerState.url);\n  return {\n    selectCurrentRoute,\n    selectFragment,\n    selectQueryParams,\n    selectQueryParam,\n    selectRouteParams,\n    selectRouteParam,\n    selectRouteData,\n    selectUrl\n  };\n}\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DEFAULT_ROUTER_FEATURENAME, DefaultRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, createRouterSelector, getSelectors, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction };","map":{"version":3,"sources":["/Users/sleepynut/Documents/Angular/course-project/node_modules/@ngrx/router-store/fesm2020/ngrx-router-store.mjs"],"names":["i1","createAction","props","isNgrxMockEnvironment","select","ACTIVE_RUNTIME_CHECKS","createFeatureSelector","createSelector","i0","InjectionToken","isDevMode","NgModule","Inject","i2","NavigationStart","RoutesRecognized","NavigationCancel","NavigationError","NavigationEnd","withLatestFrom","ROUTER_REQUEST","routerRequestAction","ROUTER_NAVIGATION","routerNavigationAction","ROUTER_CANCEL","routerCancelAction","ROUTER_ERROR","routerErrorAction","ROUTER_NAVIGATED","routerNavigatedAction","routerReducer","state","action","routerAction","type","payload","routerState","navigationId","event","id","RouterStateSerializer","DefaultRouterStateSerializer","serialize","root","serializeRoute","url","route","children","map","c","params","paramMap","data","outlet","routeConfig","component","path","pathMatch","redirectTo","queryParams","queryParamMap","fragment","undefined","parent","firstChild","pathFromRoot","MinimalRouterStateSerializer","NavigationActionTiming","_ROUTER_CONFIG","ROUTER_CONFIG","DEFAULT_ROUTER_FEATURENAME","_createRouterConfig","config","stateKey","serializer","navigationActionTiming","PreActivation","RouterTrigger","StoreRouterConnectingModule","constructor","store","router","errorHandler","activeRuntimeChecks","lastEvent","trigger","NONE","strictActionSerializability","strictStateSerializability","console","warn","setUpStoreStateListener","setUpRouterEventsListener","forRoot","ngModule","providers","provide","useValue","useFactory","deps","useClass","pipe","subscribe","routerStoreState","storeState","navigateIfNeeded","ROUTER","isSameUrl","STORE","navigateByUrl","catch","error","handleError","dispatchNavLate","PostActivation","routesRecognized","events","snapshot","dispatchRouterRequest","dispatchRouterNavigation","dispatchRouterCancel","reset","dispatchRouterError","dispatchRouterNavigated","dispatchRouterAction","lastRoutesRecognized","nextRouterState","urlAfterRedirects","dispatch","ɵfac","Store","Router","ErrorHandler","ɵmod","ɵinj","args","decorators","first","second","stripTrailingSlash","text","length","substring","createRouterSelector","getSelectors","selectState","selectRouterState","selectRootRoute","selectCurrentRoute","rootRoute","selectFragment","selectQueryParams","selectQueryParam","param","selectRouteParams","selectRouteParam","selectRouteData","selectUrl"],"mappings":"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","sourcesContent":["import * as i1 from '@ngrx/store';\nimport { createAction, props, isNgrxMockEnvironment, select, ACTIVE_RUNTIME_CHECKS, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, NgModule, Inject } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n    // Allow compilation with strictFunctionTypes - ref: #1344\n    const routerAction = action;\n    switch (routerAction.type) {\n        case ROUTER_NAVIGATION:\n        case ROUTER_ERROR:\n        case ROUTER_CANCEL:\n            return {\n                state: routerAction.payload.routerState,\n                navigationId: routerAction.payload.event.id,\n            };\n        default:\n            return state;\n    }\n}\n\nclass RouterStateSerializer {\n}\n\nclass DefaultRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            paramMap: route.paramMap,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    component: route.routeConfig.component,\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                }\n                : null,\n            queryParams: route.queryParams,\n            queryParamMap: route.queryParamMap,\n            fragment: route.fragment,\n            component: (route.routeConfig\n                ? route.routeConfig.component\n                : undefined),\n            root: undefined,\n            parent: undefined,\n            firstChild: children[0],\n            pathFromRoot: undefined,\n            children,\n        };\n    }\n}\n\nclass MinimalRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            routeConfig: route.routeConfig\n                ? {\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                }\n                : null,\n            queryParams: route.queryParams,\n            fragment: route.fragment,\n            firstChild: children[0],\n            children,\n        };\n    }\n}\n\nvar NavigationActionTiming;\n(function (NavigationActionTiming) {\n    NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n    NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\nfunction _createRouterConfig(config) {\n    return {\n        stateKey: DEFAULT_ROUTER_FEATURENAME,\n        serializer: MinimalRouterStateSerializer,\n        navigationActionTiming: NavigationActionTiming.PreActivation,\n        ...config,\n    };\n}\nvar RouterTrigger;\n(function (RouterTrigger) {\n    RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n    RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n    RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nclass StoreRouterConnectingModule {\n    constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n        this.store = store;\n        this.router = router;\n        this.serializer = serializer;\n        this.errorHandler = errorHandler;\n        this.config = config;\n        this.activeRuntimeChecks = activeRuntimeChecks;\n        this.lastEvent = null;\n        this.routerState = null;\n        this.trigger = RouterTrigger.NONE;\n        this.stateKey = this.config.stateKey;\n        if (!isNgrxMockEnvironment() &&\n            isDevMode() &&\n            (activeRuntimeChecks?.strictActionSerializability ||\n                activeRuntimeChecks?.strictStateSerializability) &&\n            this.serializer instanceof DefaultRouterStateSerializer) {\n            console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' +\n                'with the DefaultRouterStateSerializer. The default serializer ' +\n                'has an unserializable router state and actions that are not serializable. ' +\n                'To use the serializability runtime checks either use ' +\n                'the MinimalRouterStateSerializer or implement a custom router state serializer. ' +\n                'This also applies to Ivy with immutability runtime checks.');\n        }\n        this.setUpStoreStateListener();\n        this.setUpRouterEventsListener();\n    }\n    static forRoot(config = {}) {\n        return {\n            ngModule: StoreRouterConnectingModule,\n            providers: [\n                { provide: _ROUTER_CONFIG, useValue: config },\n                {\n                    provide: ROUTER_CONFIG,\n                    useFactory: _createRouterConfig,\n                    deps: [_ROUTER_CONFIG],\n                },\n                {\n                    provide: RouterStateSerializer,\n                    useClass: config.serializer\n                        ? config.serializer\n                        : config.routerState === 0 /* Full */\n                            ? DefaultRouterStateSerializer\n                            : MinimalRouterStateSerializer,\n                },\n            ],\n        };\n    }\n    setUpStoreStateListener() {\n        this.store\n            .pipe(select(this.stateKey), withLatestFrom(this.store))\n            .subscribe(([routerStoreState, storeState]) => {\n            this.navigateIfNeeded(routerStoreState, storeState);\n        });\n    }\n    navigateIfNeeded(routerStoreState, storeState) {\n        if (!routerStoreState || !routerStoreState.state) {\n            return;\n        }\n        if (this.trigger === RouterTrigger.ROUTER) {\n            return;\n        }\n        if (this.lastEvent instanceof NavigationStart) {\n            return;\n        }\n        const url = routerStoreState.state.url;\n        if (!isSameUrl(this.router.url, url)) {\n            this.storeState = storeState;\n            this.trigger = RouterTrigger.STORE;\n            this.router.navigateByUrl(url).catch((error) => {\n                this.errorHandler.handleError(error);\n            });\n        }\n    }\n    setUpRouterEventsListener() {\n        const dispatchNavLate = this.config.navigationActionTiming ===\n            NavigationActionTiming.PostActivation;\n        let routesRecognized;\n        this.router.events\n            .pipe(withLatestFrom(this.store))\n            .subscribe(([event, storeState]) => {\n            this.lastEvent = event;\n            if (event instanceof NavigationStart) {\n                this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n                if (this.trigger !== RouterTrigger.STORE) {\n                    this.storeState = storeState;\n                    this.dispatchRouterRequest(event);\n                }\n            }\n            else if (event instanceof RoutesRecognized) {\n                routesRecognized = event;\n                if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n                    this.dispatchRouterNavigation(event);\n                }\n            }\n            else if (event instanceof NavigationCancel) {\n                this.dispatchRouterCancel(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationError) {\n                this.dispatchRouterError(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationEnd) {\n                if (this.trigger !== RouterTrigger.STORE) {\n                    if (dispatchNavLate) {\n                        this.dispatchRouterNavigation(routesRecognized);\n                    }\n                    this.dispatchRouterNavigated(event);\n                }\n                this.reset();\n            }\n        });\n    }\n    dispatchRouterRequest(event) {\n        this.dispatchRouterAction(ROUTER_REQUEST, { event });\n    }\n    dispatchRouterNavigation(lastRoutesRecognized) {\n        const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n        this.dispatchRouterAction(ROUTER_NAVIGATION, {\n            routerState: nextRouterState,\n            event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState),\n        });\n    }\n    dispatchRouterCancel(event) {\n        this.dispatchRouterAction(ROUTER_CANCEL, {\n            storeState: this.storeState,\n            event,\n        });\n    }\n    dispatchRouterError(event) {\n        this.dispatchRouterAction(ROUTER_ERROR, {\n            storeState: this.storeState,\n            event: new NavigationError(event.id, event.url, `${event}`),\n        });\n    }\n    dispatchRouterNavigated(event) {\n        const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n        this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n    }\n    dispatchRouterAction(type, payload) {\n        this.trigger = RouterTrigger.ROUTER;\n        try {\n            this.store.dispatch({\n                type,\n                payload: {\n                    routerState: this.routerState,\n                    ...payload,\n                    event: this.config.routerState === 0 /* Full */\n                        ? payload.event\n                        : {\n                            id: payload.event.id,\n                            url: payload.event.url,\n                            // safe, as it will just be `undefined` for non-NavigationEnd router events\n                            urlAfterRedirects: payload.event\n                                .urlAfterRedirects,\n                        },\n                },\n            });\n        }\n        finally {\n            this.trigger = RouterTrigger.NONE;\n        }\n    }\n    reset() {\n        this.trigger = RouterTrigger.NONE;\n        this.storeState = null;\n        this.routerState = null;\n    }\n}\n/** @nocollapse */ /** @nocollapse */ StoreRouterConnectingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StoreRouterConnectingModule, deps: [{ token: i1.Store }, { token: i2.Router }, { token: RouterStateSerializer }, { token: i0.ErrorHandler }, { token: ROUTER_CONFIG }, { token: ACTIVE_RUNTIME_CHECKS }], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ /** @nocollapse */ StoreRouterConnectingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StoreRouterConnectingModule });\n/** @nocollapse */ /** @nocollapse */ StoreRouterConnectingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StoreRouterConnectingModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: StoreRouterConnectingModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.Router }, { type: RouterStateSerializer }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ROUTER_CONFIG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ACTIVE_RUNTIME_CHECKS]\n                }] }]; } });\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\nfunction isSameUrl(first, second) {\n    return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\nfunction stripTrailingSlash(text) {\n    if (text?.length > 0 && text[text.length - 1] === '/') {\n        return text.substring(0, text.length - 1);\n    }\n    return text;\n}\n\nfunction createRouterSelector() {\n    return createFeatureSelector(DEFAULT_ROUTER_FEATURENAME);\n}\nfunction getSelectors(selectState = createRouterSelector()) {\n    const selectRouterState = createSelector(selectState, (router) => router && router.state);\n    const selectRootRoute = createSelector(selectRouterState, (routerState) => routerState && routerState.root);\n    const selectCurrentRoute = createSelector(selectRootRoute, (rootRoute) => {\n        if (!rootRoute) {\n            return undefined;\n        }\n        let route = rootRoute;\n        while (route.firstChild) {\n            route = route.firstChild;\n        }\n        return route;\n    });\n    const selectFragment = createSelector(selectRootRoute, (route) => route && route.fragment);\n    const selectQueryParams = createSelector(selectRootRoute, (route) => route && route.queryParams);\n    const selectQueryParam = (param) => createSelector(selectQueryParams, (params) => params && params[param]);\n    const selectRouteParams = createSelector(selectCurrentRoute, (route) => route && route.params);\n    const selectRouteParam = (param) => createSelector(selectRouteParams, (params) => params && params[param]);\n    const selectRouteData = createSelector(selectCurrentRoute, (route) => route && route.data);\n    const selectUrl = createSelector(selectRouterState, (routerState) => routerState && routerState.url);\n    return {\n        selectCurrentRoute,\n        selectFragment,\n        selectQueryParams,\n        selectQueryParam,\n        selectRouteParams,\n        selectRouteParam,\n        selectRouteData,\n        selectUrl,\n    };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_ROUTER_FEATURENAME, DefaultRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, createRouterSelector, getSelectors, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction };\n"]},"metadata":{},"sourceType":"module"}